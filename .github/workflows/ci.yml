name: CI

on:
  push:
    branches:
      - main
      - dev
  pull_request:
    branches:
      - main
      - dev

jobs:
  backend-test:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: test_db
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h 127.0.0.1 -uroot -proot --silent"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3

    steps:
      - uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: "8.2"
          extensions: mbstring, pdo_mysql, curl, dom, fileinfo, json  

      - name: Install Composer Dependencies
        run: composer install --no-ansi --no-interaction --no-progress --prefer-dist
        working-directory: ./server

      - name: Setup Laravel
        run: |
          if [ ! -f .env ]; then
            echo "Creating minimal .env for CI"
            {
              echo "APP_ENV=testing"
              echo "APP_DEBUG=true"
              echo "APP_URL=http://localhost"
              echo "APP_KEY="
            } > .env
          else
            echo "Using existing .env"
          fi
          php artisan key:generate --force
          php artisan migrate --force
        working-directory: ./server
        env:
          DB_CONNECTION: mysql
          DB_HOST: 127.0.0.1
          DB_PORT: 3306
          DB_DATABASE: test_db
          DB_USERNAME: root
          DB_PASSWORD: root

      - name: Run Backend Tests
        run: php artisan test
        working-directory: ./server
        env:
          DB_CONNECTION: mysql
          DB_HOST: 127.0.0.1
          DB_PORT: 3306
          DB_DATABASE: test_db
          DB_USERNAME: root
          DB_PASSWORD: root

  frontend-build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: "./client/package-lock.json"
      - name: Install Frontend Dependencies
        run: npm ci
        working-directory: ./client
      - name: Build Frontend
        run: CI=false npm run build
        working-directory: ./client

  stt-server:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install STT server dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r stt_server/stt-service/requirements.txt

      - name: FastAPI health check (skip model init)
        env:
          STT_SKIP_MODEL_INIT: '1'
        run: |
          python - <<'PY'
          import sys
          sys.path.append('stt_server/stt-service')
          import stt_server as s
          from fastapi.testclient import TestClient
          c = TestClient(s.app)
          r = c.get('/health')
          print('Health:', r.status_code, r.json())
          assert r.status_code == 200
          assert 'status' in r.json()
          PY
